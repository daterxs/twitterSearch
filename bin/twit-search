#!/usr/bin/env node
const program = require('commander');
const Twit = require('../');
const StoreService = require('../lib/storeService');
const config = require('../lib/config');

program
  .option('-w --words [words]', 'List of words to search')
  .option('-g --geocode [geocode]', 'Coordinates to sarch by location')
  .option('-s --since [since]', 'From wich date look. Format YYYY-MM-DD')
  .option('-u --until [until]', 'Until wich date look. Format YYYY-MM-DD')
  .option('-i --id-max [maxId]', 'Start from this id')
  .option('-o --output [file]', 'Output on json format')
  .option('-m --mongodb [mongourl]', 'Save tweets on mongodb')
  .parse(process.argv);

const params = {};
let store;

if (program.words) params.q = program.words;
if (program.geocode) params.geocode = program.geocode;
if (program.since) params.since = program.since;
if (program.until) params.until = program.until;

console.log(params);

/* if (program.mongodb) {
  config.set('store.mongodb.url', program.mongodb);
  store = new StoreService(config);
} else {
  if (program.output){
    config.set('store.fs.path', program.output);

  }
}

if (!program.tweets) {
  count = 200;
} else {
  count = parseInt(program.tweets, 10);
}

const mongodb = conf.get('mongodb');
mongodb.collection = colName;


mongoose.connect(`${conf.get('mongodb.url')}`, conf.get('mongodb.options'))
  .then(() => console.log('Now connected to MongoDB!'))
  .then(() => mongo.createIndex(mongodb))
  .then(() => {
    const app = new App();
    const T = new Twit(conf.get('twitter'));
    app.setTimeline(T, colName);
    app.run(screen_name, count).then(
      () => { console.log('Finish...'); },
    ).then(() => process.exit());
  })
  .catch((err) => {
    console.error('Something went wrong', err);
    process.exit(1);
  }); */
